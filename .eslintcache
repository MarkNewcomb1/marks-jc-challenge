[{"/Users/marknewcomb/Desktop/jumpcloud coding challenge/marks-jc-challenge/src/App.js":"1","/Users/marknewcomb/Desktop/jumpcloud coding challenge/marks-jc-challenge/src/components/List.js":"2","/Users/marknewcomb/Desktop/jumpcloud coding challenge/marks-jc-challenge/src/components/AddOrUpdate.js":"3","/Users/marknewcomb/Desktop/jumpcloud coding challenge/marks-jc-challenge/src/index.js":"4","/Users/marknewcomb/Desktop/jumpcloud coding challenge/marks-jc-challenge/src/services/fetch-wrapper.js":"5"},{"size":478,"mtime":1607905640870,"results":"6","hashOfConfig":"7"},{"size":2425,"mtime":1607968923519,"results":"8","hashOfConfig":"7"},{"size":2206,"mtime":1607888534025,"results":"9","hashOfConfig":"7"},{"size":241,"mtime":1607819332325,"results":"10","hashOfConfig":"7"},{"size":1273,"mtime":1607973333223,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"cz5alx",{"filePath":"14","messages":"15","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"16","messages":"17","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/marknewcomb/Desktop/jumpcloud coding challenge/marks-jc-challenge/src/App.js",[],"/Users/marknewcomb/Desktop/jumpcloud coding challenge/marks-jc-challenge/src/components/List.js",["23","24"],"/Users/marknewcomb/Desktop/jumpcloud coding challenge/marks-jc-challenge/src/components/AddOrUpdate.js",["25","26","27"],"import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { useForm } from 'react-hook-form';\nimport { superstructResolver } from '@hookform/resolvers/superstruct';\nimport { struct } from 'superstruct';\n\nfunction AddOrUpdate({ history, match }) {\n    const { id } = match.params;\n    const isAddMode = !id;\n\n    const schema = struct({\n        firstname: 'string',\n        lastname: 'string',\n        username: 'string',\n        email: 'string'\n    });\n\n    function onSubmit(data) {\n        return isAddMode\n            ? console.log(data)\n            : console.log(data);\n    }\n\n    const { register, handleSubmit, reset, setValue, errors, formState } = useForm({\n        resolver: superstructResolver(schema)\n    });\n\n\n    // https://github.com/react-hook-form/resolvers look at superstruct\n    return (\n        <form onSubmit={handleSubmit(onSubmit)} onReset={reset}>\n            <h1>{isAddMode ? 'Add User' : 'Edit User'}</h1>\n            <div className=\"form-row\">\n                <div className=\"form-group col-5\">\n                    <label>First Name</label>\n                    <input name=\"firstname\" type=\"text\" ref={register} className=\"form-control\" />\n                </div>\n                <div className=\"form-group col-5\">\n                    <label>Last Name</label>\n                    <input name=\"lastname\" type=\"text\" ref={register} className=\"form-control\" />\n                </div>\n                <div className=\"form-group col-5\">\n                    <label>Username</label>\n                    <input name=\"username\" type=\"text\" ref={register} className=\"form-control\" />\n                </div>\n            </div>\n\n            <div className=\"form-row\">\n                <div className=\"form-group col-7\">\n                    <label>Email</label>\n                    <input name=\"email\" type=\"text\" ref={register} className=\"form-control\" />\n                </div>\n            </div>\n\n            <div className=\"form-group\">\n                <button type=\"submit\" className=\"btn btn-primary\">Save</button>\n                <Link to={isAddMode ? '.' : '..'} className=\"btn btn-link\">Cancel</Link>\n            </div>\n        </form>\n    )\n}\n\nexport { AddOrUpdate };","/Users/marknewcomb/Desktop/jumpcloud coding challenge/marks-jc-challenge/src/index.js",[],"/Users/marknewcomb/Desktop/jumpcloud coding challenge/marks-jc-challenge/src/services/fetch-wrapper.js",[],{"ruleId":"28","severity":1,"message":"29","line":7,"column":23,"nodeType":"30","endLine":7,"endColumn":34},{"ruleId":"28","severity":1,"message":"31","line":17,"column":8,"nodeType":"32","endLine":17,"endColumn":10,"suggestions":"33"},{"ruleId":"34","severity":1,"message":"35","line":24,"column":44,"nodeType":"30","messageId":"36","endLine":24,"endColumn":52},{"ruleId":"34","severity":1,"message":"37","line":24,"column":54,"nodeType":"30","messageId":"36","endLine":24,"endColumn":60},{"ruleId":"34","severity":1,"message":"38","line":24,"column":62,"nodeType":"30","messageId":"36","endLine":24,"endColumn":71},"react-hooks/exhaustive-deps","React Hook useCallback does nothing when called with only one argument. Did you forget to pass an array of dependencies?","Identifier","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.","ArrayExpression",["39"],"no-unused-vars","'setValue' is assigned a value but never used.","unusedVar","'errors' is assigned a value but never used.","'formState' is assigned a value but never used.",{"desc":"40","fix":"41"},"Update the dependencies array to be: [fetchData]",{"range":"42","text":"43"},[444,446],"[fetchData]"]